pipeline {
    agent {
        label("dev")
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }
    stages {
        stage("confirm branch") {
            steps {
                sh '''
                    git branch --show-current
                    echo $GIT_BRANCH
                '''
            }
        }

        stage('test auth') {
            agent {
                docker {
                    image 'golang:alpine'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    id
                    cd weatherapp/auth/src/main
                    go build
                    cd -
                    ls -la
                '''
            }
        }

        stage('test UI') {
            agent {
                docker {
                    image 'node:17'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/UI
                    npm run
                '''
            }
        }

        stage('test weather') {
            agent {
                docker {
                    image 'python:3.8-slim-buster'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/weather
                    pip3 install -r requirements.txt
                '''
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        // stage("Quality Gate") {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS') {
        //             script {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to Quality Gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Define your Docker Hub username and access token
                    def dockerHubUser = 'mohaminekabore'
                    def dockerHubAccessToken = 'dckr_pat_4VkKPK0BlrhPbua_s4gt9vxdJOU'

                    // Docker login command with access token
                    sh "echo ${dockerHubAccessToken} | docker login -u ${dockerHubUser} --password-stdin"
                }
            }
        }

        stage('Build auth') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/auth
                    docker build -t mohaminekabore/weatherapp-auth:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push auth') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/kabore'
                }
            }
            steps {
                sh '''
                    docker push mohaminekabore/weatherapp-auth:${BUILD_NUMBER}
                '''
            }
        }
        stage('Build UI') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/UI
                    docker build -t mohaminekabore/weatherapp-ui:${BUILD_NUMBER} .
                '''
            }
        }
        stage('Push UI') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/kabore'
                }
            }
            steps {
                sh '''
                    docker push mohaminekabore/weatherapp-ui:${BUILD_NUMBER}
                '''
            }
        }
        stage('Build weather') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/weather
                    docker build -t mohaminekabore/weatherapp-weather:${BUILD_NUMBER} .
                '''
            }
        }
        stage('Push weather') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/kabore'
                }
            }
            steps {
                sh '''
                    docker push mohaminekabore/weatherapp-weather:${BUILD_NUMBER}
                '''
            }
        }
        stage('Build redis') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/redis
                    docker build -t mohaminekabore/weatherapp-redis:${BUILD_NUMBER} .
                '''
            }
        }
        stage('Push redis') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/kabore'
                }
            }
            steps {
                sh '''
                    docker push mohaminekabore/weatherapp-redis:${BUILD_NUMBER}
                '''
            }
        }
        stage('Build db') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/db
                    docker build -t mohaminekabore/weatherapp-db:${BUILD_NUMBER} .
                '''
            }
        }
        stage('Push db') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/kabore'
                }
            }
            steps {
                sh '''
                    docker push mohaminekabore/weatherapp-db:${BUILD_NUMBER}
                '''
            }
        }
    }
}
